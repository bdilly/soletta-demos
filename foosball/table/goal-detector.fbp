#!/usr/bin/env sol-fbp-runner

# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is a subflow used to read variations on an enlightened light sensor.
# Everytime a ball pass between the led and light sensor variations will
# be detected and a pulse will be sent through an exported port.
#
# Using one on each side of the foosball table make it possible to identify
# when goals happen.
#
# Exported output ports:
#  * GOAL (pulse)

OUTPORT=Goal.OUT:GOAL

OPTION=Led.pin:led_pin
OPTION=Sensor.pin:sensor_pin
OPTION=Sensor.device:sensor_device

# Turn led on
Led(DetectorLed)
True(constant/boolean:value=true)
True OUT -> IN Led

# Send pulse when measured light is below 70% of env light
# It indicates a ball has passed in front the led
ValuesBuffer(int/buffer:circular=true, samples=10, operation="mean", timeout=1)
Threshold(float/multiplication)
Rate(constant/float:value=0.7)
BelowThreshold(int/less)

# Filter is required to avoid multiple consecutive readings of light
# below threshold to be interpreted as multiple goals.
Filter(filter-repeated/boolean)
Goal(converter/boolean-to-empty)

Sensor(DetectorLightSensor)

Sensor OUT -> IN ValuesBuffer
ValuesBuffer OUT -> IN _(converter/int-to-float) OUT -> OPERAND[0] Threshold
Rate OUT -> OPERAND[1] Threshold

Sensor OUT -> IN[0] BelowThreshold
Threshold OUT -> IN _(converter/float-to-int) OUT -> IN[1] BelowThreshold
BelowThreshold OUT -> IN Filter OUT -> PULSE_IF_TRUE Goal
